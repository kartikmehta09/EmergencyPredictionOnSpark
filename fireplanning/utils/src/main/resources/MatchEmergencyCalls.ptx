//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-19856038
// Cuda compilation tools, release 7.5, V7.5.17
// Based on LLVM 3.4svn
//

.version 4.3
.target sm_20
.address_size 64

	// .globl	haversine
.func  (.param .b64 func_retval0) __internal_trig_reduction_slowpathd
(
	.param .b64 __internal_trig_reduction_slowpathd_param_0,
	.param .b64 __internal_trig_reduction_slowpathd_param_1
)
;
.func  (.param .b64 func_retval0) __internal_accurate_pow
(
	.param .b64 __internal_accurate_pow_param_0
)
;
.const .align 8 .b8 __cudart_i2opi_d[144] = {8, 93, 141, 31, 177, 95, 251, 107, 234, 146, 82, 138, 247, 57, 7, 61, 123, 241, 229, 235, 199, 186, 39, 117, 45, 234, 95, 158, 102, 63, 70, 79, 183, 9, 203, 39, 207, 126, 54, 109, 31, 109, 10, 90, 139, 17, 47, 239, 15, 152, 5, 222, 255, 151, 248, 31, 59, 40, 249, 189, 139, 95, 132, 156, 244, 57, 83, 131, 57, 214, 145, 57, 65, 126, 95, 180, 38, 112, 156, 233, 132, 68, 187, 46, 245, 53, 130, 232, 62, 167, 41, 177, 28, 235, 29, 254, 28, 146, 209, 9, 234, 46, 73, 6, 224, 210, 77, 66, 58, 110, 36, 183, 97, 197, 187, 222, 171, 99, 81, 254, 65, 144, 67, 60, 153, 149, 98, 219, 192, 221, 52, 245, 209, 87, 39, 252, 41, 21, 68, 78, 110, 131, 249, 162};
.const .align 8 .b8 __cudart_sin_cos_coeffs[128] = {186, 94, 120, 249, 101, 219, 229, 61, 70, 210, 176, 44, 241, 229, 90, 190, 146, 227, 172, 105, 227, 29, 199, 62, 161, 98, 219, 25, 160, 1, 42, 191, 24, 8, 17, 17, 17, 17, 129, 63, 84, 85, 85, 85, 85, 85, 197, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 129, 253, 32, 131, 255, 168, 189, 40, 133, 239, 193, 167, 238, 33, 62, 217, 230, 6, 142, 79, 126, 146, 190, 233, 188, 221, 25, 160, 1, 250, 62, 71, 93, 193, 22, 108, 193, 86, 191, 81, 85, 85, 85, 85, 85, 165, 63, 0, 0, 0, 0, 0, 0, 224, 191, 0, 0, 0, 0, 0, 0, 240, 63};

.visible .entry haversine(
	.param .u64 haversine_param_0,
	.param .u64 haversine_param_1,
	.param .u64 haversine_param_2
)
{
	.local .align 4 .b8 	__local_depot0[4];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<55>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<119>;
	.reg .f64 	%fd<308>;
	.reg .b64 	%rd<53>;


	mov.u64 	%rd52, __local_depot0;
	cvta.local.u64 	%SP, %rd52;
	ld.param.u64 	%rd4, [haversine_param_0];
	ld.param.u64 	%rd2, [haversine_param_1];
	ld.param.u64 	%rd3, [haversine_param_2];
	add.u64 	%rd5, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd5;
	mov.u32 	%r20, %ntid.x;
	mov.u32 	%r21, %ctaid.x;
	mov.u32 	%r22, %tid.x;
	mad.lo.s32 	%r1, %r20, %r21, %r22;
	cvta.to.global.u64 	%rd6, %rd4;
	ldu.global.u32 	%r23, [%rd6];
	setp.ge.s32	%p3, %r1, %r23;
	@%p3 bra 	BB0_63;

	cvta.to.global.u64 	%rd7, %rd2;
	shl.b32 	%r24, %r1, 2;
	mul.wide.s32 	%rd8, %r24, 8;
	add.s64 	%rd9, %rd7, %rd8;
	ld.global.f64 	%fd85, [%rd9];
	ld.global.f64 	%fd86, [%rd9+16];
	sub.f64 	%fd87, %fd86, %fd85;
	mul.f64 	%fd88, %fd87, 0d3F91DF46AAAAAAAB;
	ld.global.f64 	%fd89, [%rd9+8];
	ld.global.f64 	%fd90, [%rd9+24];
	sub.f64 	%fd1, %fd90, %fd89;
	mul.f64 	%fd281, %fd88, 0d3FE0000000000000;
	abs.f64 	%fd91, %fd281;
	setp.neu.f64	%p4, %fd91, 0d7FF0000000000000;
	@%p4 bra 	BB0_3;

	mov.f64 	%fd92, 0d0000000000000000;
	mul.rn.f64 	%fd281, %fd281, %fd92;

BB0_3:
	mul.f64 	%fd93, %fd281, 0d3FE45F306DC9C883;
	cvt.rni.s32.f64	%r115, %fd93;
	st.local.u32 	[%rd1], %r115;
	cvt.rn.f64.s32	%fd94, %r115;
	neg.f64 	%fd95, %fd94;
	mov.f64 	%fd96, 0d3FF921FB54442D18;
	fma.rn.f64 	%fd97, %fd95, %fd96, %fd281;
	mov.f64 	%fd98, 0d3C91A62633145C00;
	fma.rn.f64 	%fd99, %fd95, %fd98, %fd97;
	mov.f64 	%fd100, 0d397B839A252049C0;
	fma.rn.f64 	%fd282, %fd95, %fd100, %fd99;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r25}, %fd281;
	}
	and.b32  	%r26, %r25, 2145386496;
	setp.lt.u32	%p5, %r26, 1105199104;
	@%p5 bra 	BB0_5;

	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.f64	[param0+0], %fd281;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd5;
	.param .b64 retval0;
	call.uni (retval0), 
	__internal_trig_reduction_slowpathd, 
	(
	param0, 
	param1
	);
	ld.param.f64	%fd282, [retval0+0];
	
	//{
	}// Callseq End 0
	ld.local.u32 	%r115, [%rd1];

BB0_5:
	and.b32  	%r27, %r115, 1;
	shl.b32 	%r28, %r27, 3;
	setp.eq.s32	%p6, %r27, 0;
	selp.f64	%fd101, 0d3DE5DB65F9785EBA, 0dBDA8FF8320FD8164, %p6;
	mul.wide.u32 	%rd11, %r28, 8;
	mov.u64 	%rd12, __cudart_sin_cos_coeffs;
	add.s64 	%rd13, %rd11, %rd12;
	ld.const.f64 	%fd102, [%rd13+8];
	mul.rn.f64 	%fd8, %fd282, %fd282;
	fma.rn.f64 	%fd103, %fd101, %fd8, %fd102;
	ld.const.f64 	%fd104, [%rd13+16];
	fma.rn.f64 	%fd105, %fd103, %fd8, %fd104;
	ld.const.f64 	%fd106, [%rd13+24];
	fma.rn.f64 	%fd107, %fd105, %fd8, %fd106;
	ld.const.f64 	%fd108, [%rd13+32];
	fma.rn.f64 	%fd109, %fd107, %fd8, %fd108;
	ld.const.f64 	%fd110, [%rd13+40];
	fma.rn.f64 	%fd111, %fd109, %fd8, %fd110;
	ld.const.f64 	%fd112, [%rd13+48];
	fma.rn.f64 	%fd9, %fd111, %fd8, %fd112;
	fma.rn.f64 	%fd283, %fd9, %fd282, %fd282;
	@%p6 bra 	BB0_7;

	mov.f64 	%fd113, 0d3FF0000000000000;
	fma.rn.f64 	%fd283, %fd9, %fd8, %fd113;

BB0_7:
	and.b32  	%r29, %r115, 2;
	setp.eq.s32	%p7, %r29, 0;
	@%p7 bra 	BB0_9;

	mov.f64 	%fd114, 0d0000000000000000;
	mov.f64 	%fd115, 0dBFF0000000000000;
	fma.rn.f64 	%fd283, %fd283, %fd115, %fd114;

BB0_9:
	mov.f64 	%fd116, 0d4000000000000000;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r5}, %fd116;
	}
	bfe.u32 	%r30, %r5, 20, 11;
	add.s32 	%r31, %r30, -1012;
	mov.u64 	%rd14, 4611686018427387904;
	shl.b64 	%rd15, %rd14, %r31;
	setp.eq.s64	%p8, %rd15, -9223372036854775808;
	abs.f64 	%fd15, %fd283;
	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.f64	[param0+0], %fd15;
	.param .b64 retval0;
	call.uni (retval0), 
	__internal_accurate_pow, 
	(
	param0
	);
	ld.param.f64	%fd290, [retval0+0];
	
	//{
	}// Callseq End 1
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r6}, %fd283;
	}
	setp.lt.s32	%p9, %r6, 0;
	and.pred  	%p1, %p9, %p8;
	@!%p1 bra 	BB0_11;
	bra.uni 	BB0_10;

BB0_10:
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r32}, %fd290;
	}
	xor.b32  	%r33, %r32, -2147483648;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r34, %temp}, %fd290;
	}
	mov.b64 	%fd290, {%r34, %r33};

BB0_11:
	mov.f64 	%fd289, %fd290;
	setp.eq.f64	%p10, %fd283, 0d0000000000000000;
	@%p10 bra 	BB0_14;
	bra.uni 	BB0_12;

BB0_14:
	bfe.u32 	%r35, %r5, 20, 11;
	add.s32 	%r36, %r35, -1012;
	shl.b64 	%rd17, %rd14, %r36;
	setp.eq.s64	%p13, %rd17, -9223372036854775808;
	selp.b32	%r37, %r6, 0, %p13;
	or.b32  	%r38, %r37, 2146435072;
	setp.lt.s32	%p14, %r5, 0;
	selp.b32	%r39, %r38, %r37, %p14;
	mov.u32 	%r40, 0;
	mov.b64 	%fd289, {%r40, %r39};
	bra.uni 	BB0_15;

BB0_12:
	setp.gt.s32	%p11, %r6, -1;
	@%p11 bra 	BB0_15;

	cvt.rzi.f64.f64	%fd118, %fd116;
	setp.neu.f64	%p12, %fd118, 0d4000000000000000;
	selp.f64	%fd289, 0dFFF8000000000000, %fd289, %p12;

BB0_15:
	mov.f64 	%fd21, %fd289;
	add.f64 	%fd22, %fd283, 0d4000000000000000;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r41}, %fd22;
	}
	and.b32  	%r42, %r41, 2146435072;
	setp.ne.s32	%p15, %r42, 2146435072;
	mov.f64 	%fd288, %fd21;
	@%p15 bra 	BB0_22;

	setp.gtu.f64	%p16, %fd15, 0d7FF0000000000000;
	mov.f64 	%fd288, %fd22;
	@%p16 bra 	BB0_22;

	abs.f64 	%fd23, %fd116;
	setp.gtu.f64	%p17, %fd23, 0d7FF0000000000000;
	mov.f64 	%fd287, %fd22;
	mov.f64 	%fd288, %fd287;
	@%p17 bra 	BB0_22;

	setp.eq.f64	%p18, %fd23, 0d7FF0000000000000;
	@%p18 bra 	BB0_21;
	bra.uni 	BB0_19;

BB0_21:
	setp.gt.f64	%p20, %fd15, 0d3FF0000000000000;
	selp.b32	%r49, 2146435072, 0, %p20;
	xor.b32  	%r50, %r49, 2146435072;
	setp.lt.s32	%p21, %r5, 0;
	selp.b32	%r51, %r50, %r49, %p21;
	setp.eq.f64	%p22, %fd283, 0dBFF0000000000000;
	selp.b32	%r52, 1072693248, %r51, %p22;
	mov.u32 	%r53, 0;
	mov.b64 	%fd288, {%r53, %r52};
	bra.uni 	BB0_22;

BB0_19:
	setp.neu.f64	%p19, %fd15, 0d7FF0000000000000;
	mov.f64 	%fd288, %fd21;
	@%p19 bra 	BB0_22;

	shr.s32 	%r43, %r5, 31;
	and.b32  	%r44, %r43, -2146435072;
	add.s32 	%r45, %r44, 2146435072;
	or.b32  	%r46, %r45, -2147483648;
	selp.b32	%r47, %r46, %r45, %p1;
	mov.u32 	%r48, 0;
	mov.b64 	%fd288, {%r48, %r47};

BB0_22:
	mul.f64 	%fd120, %fd1, 0d3F91DF46AAAAAAAB;
	setp.eq.f64	%p23, %fd283, 0d3FF0000000000000;
	selp.f64	%fd27, 0d3FF0000000000000, %fd288, %p23;
	mul.f64 	%fd291, %fd120, 0d3FE0000000000000;
	abs.f64 	%fd121, %fd291;
	setp.neu.f64	%p24, %fd121, 0d7FF0000000000000;
	@%p24 bra 	BB0_24;

	mov.f64 	%fd122, 0d0000000000000000;
	mul.rn.f64 	%fd291, %fd291, %fd122;

BB0_24:
	mul.f64 	%fd123, %fd291, 0d3FE45F306DC9C883;
	cvt.rni.s32.f64	%r116, %fd123;
	st.local.u32 	[%rd1], %r116;
	cvt.rn.f64.s32	%fd124, %r116;
	neg.f64 	%fd125, %fd124;
	fma.rn.f64 	%fd127, %fd125, %fd96, %fd291;
	fma.rn.f64 	%fd129, %fd125, %fd98, %fd127;
	fma.rn.f64 	%fd292, %fd125, %fd100, %fd129;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r54}, %fd291;
	}
	and.b32  	%r55, %r54, 2145386496;
	setp.lt.u32	%p25, %r55, 1105199104;
	@%p25 bra 	BB0_26;

	// Callseq Start 2
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.f64	[param0+0], %fd291;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd5;
	.param .b64 retval0;
	call.uni (retval0), 
	__internal_trig_reduction_slowpathd, 
	(
	param0, 
	param1
	);
	ld.param.f64	%fd292, [retval0+0];
	
	//{
	}// Callseq End 2
	ld.local.u32 	%r116, [%rd1];

BB0_26:
	and.b32  	%r56, %r116, 1;
	shl.b32 	%r57, %r56, 3;
	setp.eq.s32	%p26, %r56, 0;
	selp.f64	%fd131, 0d3DE5DB65F9785EBA, 0dBDA8FF8320FD8164, %p26;
	mul.wide.u32 	%rd22, %r57, 8;
	add.s64 	%rd24, %rd22, %rd12;
	ld.const.f64 	%fd132, [%rd24+8];
	mul.rn.f64 	%fd34, %fd292, %fd292;
	fma.rn.f64 	%fd133, %fd131, %fd34, %fd132;
	ld.const.f64 	%fd134, [%rd24+16];
	fma.rn.f64 	%fd135, %fd133, %fd34, %fd134;
	ld.const.f64 	%fd136, [%rd24+24];
	fma.rn.f64 	%fd137, %fd135, %fd34, %fd136;
	ld.const.f64 	%fd138, [%rd24+32];
	fma.rn.f64 	%fd139, %fd137, %fd34, %fd138;
	ld.const.f64 	%fd140, [%rd24+40];
	fma.rn.f64 	%fd141, %fd139, %fd34, %fd140;
	ld.const.f64 	%fd142, [%rd24+48];
	fma.rn.f64 	%fd35, %fd141, %fd34, %fd142;
	fma.rn.f64 	%fd293, %fd35, %fd292, %fd292;
	@%p26 bra 	BB0_28;

	mov.f64 	%fd143, 0d3FF0000000000000;
	fma.rn.f64 	%fd293, %fd35, %fd34, %fd143;

BB0_28:
	and.b32  	%r58, %r116, 2;
	setp.eq.s32	%p27, %r58, 0;
	@%p27 bra 	BB0_30;

	mov.f64 	%fd144, 0d0000000000000000;
	mov.f64 	%fd145, 0dBFF0000000000000;
	fma.rn.f64 	%fd293, %fd293, %fd145, %fd144;

BB0_30:
	bfe.u32 	%r59, %r5, 20, 11;
	add.s32 	%r60, %r59, -1012;
	shl.b64 	%rd26, %rd14, %r60;
	setp.eq.s64	%p28, %rd26, -9223372036854775808;
	abs.f64 	%fd41, %fd293;
	// Callseq Start 3
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.f64	[param0+0], %fd41;
	.param .b64 retval0;
	call.uni (retval0), 
	__internal_accurate_pow, 
	(
	param0
	);
	ld.param.f64	%fd300, [retval0+0];
	
	//{
	}// Callseq End 3
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r10}, %fd293;
	}
	setp.lt.s32	%p29, %r10, 0;
	and.pred  	%p2, %p29, %p28;
	@!%p2 bra 	BB0_32;
	bra.uni 	BB0_31;

BB0_31:
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r61}, %fd300;
	}
	xor.b32  	%r62, %r61, -2147483648;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r63, %temp}, %fd300;
	}
	mov.b64 	%fd300, {%r63, %r62};

BB0_32:
	mov.f64 	%fd299, %fd300;
	setp.eq.f64	%p30, %fd293, 0d0000000000000000;
	@%p30 bra 	BB0_35;
	bra.uni 	BB0_33;

BB0_35:
	bfe.u32 	%r64, %r5, 20, 11;
	add.s32 	%r65, %r64, -1012;
	shl.b64 	%rd28, %rd14, %r65;
	setp.eq.s64	%p33, %rd28, -9223372036854775808;
	selp.b32	%r66, %r10, 0, %p33;
	or.b32  	%r67, %r66, 2146435072;
	setp.lt.s32	%p34, %r5, 0;
	selp.b32	%r68, %r67, %r66, %p34;
	mov.u32 	%r69, 0;
	mov.b64 	%fd299, {%r69, %r68};
	bra.uni 	BB0_36;

BB0_33:
	setp.gt.s32	%p31, %r10, -1;
	@%p31 bra 	BB0_36;

	cvt.rzi.f64.f64	%fd147, %fd116;
	setp.neu.f64	%p32, %fd147, 0d4000000000000000;
	selp.f64	%fd299, 0dFFF8000000000000, %fd299, %p32;

BB0_36:
	mov.f64 	%fd47, %fd299;
	add.f64 	%fd48, %fd293, 0d4000000000000000;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r70}, %fd48;
	}
	and.b32  	%r71, %r70, 2146435072;
	setp.ne.s32	%p35, %r71, 2146435072;
	mov.f64 	%fd298, %fd47;
	@%p35 bra 	BB0_43;

	setp.gtu.f64	%p36, %fd41, 0d7FF0000000000000;
	mov.f64 	%fd298, %fd48;
	@%p36 bra 	BB0_43;

	abs.f64 	%fd49, %fd116;
	setp.gtu.f64	%p37, %fd49, 0d7FF0000000000000;
	mov.f64 	%fd297, %fd48;
	mov.f64 	%fd298, %fd297;
	@%p37 bra 	BB0_43;

	setp.eq.f64	%p38, %fd49, 0d7FF0000000000000;
	@%p38 bra 	BB0_42;
	bra.uni 	BB0_40;

BB0_42:
	setp.gt.f64	%p40, %fd41, 0d3FF0000000000000;
	selp.b32	%r78, 2146435072, 0, %p40;
	xor.b32  	%r79, %r78, 2146435072;
	setp.lt.s32	%p41, %r5, 0;
	selp.b32	%r80, %r79, %r78, %p41;
	setp.eq.f64	%p42, %fd293, 0dBFF0000000000000;
	selp.b32	%r81, 1072693248, %r80, %p42;
	mov.u32 	%r82, 0;
	mov.b64 	%fd298, {%r82, %r81};
	bra.uni 	BB0_43;

BB0_40:
	setp.neu.f64	%p39, %fd41, 0d7FF0000000000000;
	mov.f64 	%fd298, %fd47;
	@%p39 bra 	BB0_43;

	shr.s32 	%r72, %r5, 31;
	and.b32  	%r73, %r72, -2146435072;
	add.s32 	%r74, %r73, 2146435072;
	or.b32  	%r75, %r74, -2147483648;
	selp.b32	%r76, %r75, %r74, %p2;
	mov.u32 	%r77, 0;
	mov.b64 	%fd298, {%r77, %r76};

BB0_43:
	setp.eq.f64	%p43, %fd293, 0d3FF0000000000000;
	selp.f64	%fd53, 0d3FF0000000000000, %fd298, %p43;
	ld.global.f64 	%fd149, [%rd9];
	mul.f64 	%fd301, %fd149, 0d3F91DF46AAAAAAAB;
	abs.f64 	%fd150, %fd301;
	setp.neu.f64	%p44, %fd150, 0d7FF0000000000000;
	@%p44 bra 	BB0_45;

	mov.f64 	%fd151, 0d0000000000000000;
	mul.rn.f64 	%fd301, %fd301, %fd151;

BB0_45:
	mul.f64 	%fd152, %fd301, 0d3FE45F306DC9C883;
	cvt.rni.s32.f64	%r117, %fd152;
	st.local.u32 	[%rd1], %r117;
	cvt.rn.f64.s32	%fd153, %r117;
	neg.f64 	%fd154, %fd153;
	fma.rn.f64 	%fd156, %fd154, %fd96, %fd301;
	fma.rn.f64 	%fd158, %fd154, %fd98, %fd156;
	fma.rn.f64 	%fd302, %fd154, %fd100, %fd158;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r88}, %fd301;
	}
	and.b32  	%r89, %r88, 2145386496;
	setp.lt.u32	%p45, %r89, 1105199104;
	@%p45 bra 	BB0_47;

	// Callseq Start 4
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.f64	[param0+0], %fd301;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd5;
	.param .b64 retval0;
	call.uni (retval0), 
	__internal_trig_reduction_slowpathd, 
	(
	param0, 
	param1
	);
	ld.param.f64	%fd302, [retval0+0];
	
	//{
	}// Callseq End 4
	ld.local.u32 	%r117, [%rd1];

BB0_47:
	add.s32 	%r14, %r117, 1;
	and.b32  	%r90, %r14, 1;
	shl.b32 	%r91, %r90, 3;
	setp.eq.s32	%p46, %r90, 0;
	selp.f64	%fd160, 0d3DE5DB65F9785EBA, 0dBDA8FF8320FD8164, %p46;
	mul.wide.u32 	%rd36, %r91, 8;
	add.s64 	%rd38, %rd36, %rd12;
	ld.const.f64 	%fd161, [%rd38+8];
	mul.rn.f64 	%fd60, %fd302, %fd302;
	fma.rn.f64 	%fd162, %fd160, %fd60, %fd161;
	ld.const.f64 	%fd163, [%rd38+16];
	fma.rn.f64 	%fd164, %fd162, %fd60, %fd163;
	ld.const.f64 	%fd165, [%rd38+24];
	fma.rn.f64 	%fd166, %fd164, %fd60, %fd165;
	ld.const.f64 	%fd167, [%rd38+32];
	fma.rn.f64 	%fd168, %fd166, %fd60, %fd167;
	ld.const.f64 	%fd169, [%rd38+40];
	fma.rn.f64 	%fd170, %fd168, %fd60, %fd169;
	ld.const.f64 	%fd171, [%rd38+48];
	fma.rn.f64 	%fd61, %fd170, %fd60, %fd171;
	fma.rn.f64 	%fd303, %fd61, %fd302, %fd302;
	@%p46 bra 	BB0_49;

	mov.f64 	%fd172, 0d3FF0000000000000;
	fma.rn.f64 	%fd303, %fd61, %fd60, %fd172;

BB0_49:
	and.b32  	%r92, %r14, 2;
	setp.eq.s32	%p47, %r92, 0;
	@%p47 bra 	BB0_51;

	mov.f64 	%fd173, 0d0000000000000000;
	mov.f64 	%fd174, 0dBFF0000000000000;
	fma.rn.f64 	%fd303, %fd303, %fd174, %fd173;

BB0_51:
	mul.f64 	%fd67, %fd53, %fd303;
	ld.global.f64 	%fd175, [%rd9+16];
	mul.f64 	%fd304, %fd175, 0d3F91DF46AAAAAAAB;
	abs.f64 	%fd176, %fd304;
	setp.neu.f64	%p48, %fd176, 0d7FF0000000000000;
	@%p48 bra 	BB0_53;

	mov.f64 	%fd177, 0d0000000000000000;
	mul.rn.f64 	%fd304, %fd304, %fd177;

BB0_53:
	mul.f64 	%fd178, %fd304, 0d3FE45F306DC9C883;
	cvt.rni.s32.f64	%r118, %fd178;
	st.local.u32 	[%rd1], %r118;
	cvt.rn.f64.s32	%fd179, %r118;
	neg.f64 	%fd180, %fd179;
	fma.rn.f64 	%fd182, %fd180, %fd96, %fd304;
	fma.rn.f64 	%fd184, %fd180, %fd98, %fd182;
	fma.rn.f64 	%fd305, %fd180, %fd100, %fd184;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r98}, %fd304;
	}
	and.b32  	%r99, %r98, 2145386496;
	setp.lt.u32	%p49, %r99, 1105199104;
	@%p49 bra 	BB0_55;

	// Callseq Start 5
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b64 param0;
	st.param.f64	[param0+0], %fd304;
	.param .b64 param1;
	st.param.b64	[param1+0], %rd5;
	.param .b64 retval0;
	call.uni (retval0), 
	__internal_trig_reduction_slowpathd, 
	(
	param0, 
	param1
	);
	ld.param.f64	%fd305, [retval0+0];
	
	//{
	}// Callseq End 5
	ld.local.u32 	%r118, [%rd1];

BB0_55:
	add.s32 	%r18, %r118, 1;
	and.b32  	%r100, %r18, 1;
	shl.b32 	%r101, %r100, 3;
	setp.eq.s32	%p50, %r100, 0;
	selp.f64	%fd186, 0d3DE5DB65F9785EBA, 0dBDA8FF8320FD8164, %p50;
	mul.wide.u32 	%rd46, %r101, 8;
	add.s64 	%rd48, %rd46, %rd12;
	ld.const.f64 	%fd187, [%rd48+8];
	mul.rn.f64 	%fd74, %fd305, %fd305;
	fma.rn.f64 	%fd188, %fd186, %fd74, %fd187;
	ld.const.f64 	%fd189, [%rd48+16];
	fma.rn.f64 	%fd190, %fd188, %fd74, %fd189;
	ld.const.f64 	%fd191, [%rd48+24];
	fma.rn.f64 	%fd192, %fd190, %fd74, %fd191;
	ld.const.f64 	%fd193, [%rd48+32];
	fma.rn.f64 	%fd194, %fd192, %fd74, %fd193;
	ld.const.f64 	%fd195, [%rd48+40];
	fma.rn.f64 	%fd196, %fd194, %fd74, %fd195;
	ld.const.f64 	%fd197, [%rd48+48];
	fma.rn.f64 	%fd75, %fd196, %fd74, %fd197;
	fma.rn.f64 	%fd306, %fd75, %fd305, %fd305;
	@%p50 bra 	BB0_57;

	mov.f64 	%fd198, 0d3FF0000000000000;
	fma.rn.f64 	%fd306, %fd75, %fd74, %fd198;

BB0_57:
	and.b32  	%r102, %r18, 2;
	setp.eq.s32	%p51, %r102, 0;
	@%p51 bra 	BB0_59;

	mov.f64 	%fd199, 0d0000000000000000;
	mov.f64 	%fd200, 0dBFF0000000000000;
	fma.rn.f64 	%fd306, %fd306, %fd200, %fd199;

BB0_59:
	fma.rn.f64 	%fd201, %fd67, %fd306, %fd27;
	sqrt.rn.f64 	%fd81, %fd201;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r19}, %fd81;
	}
	mov.b32 	 %f1, %r19;
	abs.f32 	%f2, %f1;
	setp.lt.f32	%p52, %f2, 0f3FE26666;
	@%p52 bra 	BB0_61;
	bra.uni 	BB0_60;

BB0_61:
	mul.f64 	%fd252, %fd81, %fd81;
	mov.f64 	%fd253, 0dBFB3823B180754AF;
	mov.f64 	%fd254, 0d3FB0066BDC1895E9;
	fma.rn.f64 	%fd255, %fd254, %fd252, %fd253;
	mov.f64 	%fd256, 0d3FB11E52CC2F79AE;
	fma.rn.f64 	%fd257, %fd255, %fd252, %fd256;
	mov.f64 	%fd258, 0dBF924EAF3526861B;
	fma.rn.f64 	%fd259, %fd257, %fd252, %fd258;
	mov.f64 	%fd260, 0d3F91DF02A31E6CB7;
	fma.rn.f64 	%fd261, %fd259, %fd252, %fd260;
	mov.f64 	%fd262, 0d3F847D18B0EEC6CC;
	fma.rn.f64 	%fd263, %fd261, %fd252, %fd262;
	mov.f64 	%fd264, 0d3F8D0AF961BA53B0;
	fma.rn.f64 	%fd265, %fd263, %fd252, %fd264;
	mov.f64 	%fd266, 0d3F91BF7734CF1C48;
	fma.rn.f64 	%fd267, %fd265, %fd252, %fd266;
	mov.f64 	%fd268, 0d3F96E91483144EF7;
	fma.rn.f64 	%fd269, %fd267, %fd252, %fd268;
	mov.f64 	%fd270, 0d3F9F1C6E0A4F9F81;
	fma.rn.f64 	%fd271, %fd269, %fd252, %fd270;
	mov.f64 	%fd272, 0d3FA6DB6DC27FA92B;
	fma.rn.f64 	%fd273, %fd271, %fd252, %fd272;
	mov.f64 	%fd274, 0d3FB333333320F91B;
	fma.rn.f64 	%fd275, %fd273, %fd252, %fd274;
	mov.f64 	%fd276, 0d3FC5555555555F4D;
	fma.rn.f64 	%fd277, %fd275, %fd252, %fd276;
	mul.f64 	%fd278, %fd252, %fd277;
	fma.rn.f64 	%fd307, %fd278, %fd81, %fd81;
	bra.uni 	BB0_62;

BB0_60:
	abs.f64 	%fd204, %fd81;
	mov.f64 	%fd205, 0d3FE0000000000000;
	mov.f64 	%fd206, 0dBFE0000000000000;
	fma.rn.f64 	%fd203, %fd206, %fd204, %fd205;
	// inline asm
	rsqrt.approx.ftz.f64 %fd202, %fd203;
	// inline asm
	{
	.reg .b32 %temp; 
	mov.b64 	{%r103, %temp}, %fd202;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r104}, %fd202;
	}
	add.s32 	%r105, %r104, -1048576;
	mov.b64 	%fd207, {%r103, %r105};
	mul.f64 	%fd208, %fd203, %fd202;
	neg.f64 	%fd209, %fd208;
	fma.rn.f64 	%fd210, %fd208, %fd209, %fd203;
	fma.rn.f64 	%fd211, %fd210, %fd207, %fd208;
	neg.f64 	%fd212, %fd211;
	mov.f64 	%fd213, 0d3FF0000000000000;
	fma.rn.f64 	%fd214, %fd202, %fd212, %fd213;
	fma.rn.f64 	%fd215, %fd214, %fd207, %fd207;
	fma.rn.f64 	%fd216, %fd211, %fd212, %fd203;
	fma.rn.f64 	%fd217, %fd216, %fd215, %fd211;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r106}, %fd203;
	}
	setp.lt.s32	%p53, %r106, 0;
	selp.f64	%fd218, 0dFFF8000000000000, %fd217, %p53;
	setp.equ.f64	%p54, %fd203, 0d0000000000000000;
	selp.f64	%fd219, %fd203, %fd218, %p54;
	mov.f64 	%fd220, 0dBFB3823B180754AF;
	mov.f64 	%fd221, 0d3FB0066BDC1895E9;
	fma.rn.f64 	%fd222, %fd221, %fd203, %fd220;
	mov.f64 	%fd223, 0d3FB11E52CC2F79AE;
	fma.rn.f64 	%fd224, %fd222, %fd203, %fd223;
	mov.f64 	%fd225, 0dBF924EAF3526861B;
	fma.rn.f64 	%fd226, %fd224, %fd203, %fd225;
	mov.f64 	%fd227, 0d3F91DF02A31E6CB7;
	fma.rn.f64 	%fd228, %fd226, %fd203, %fd227;
	mov.f64 	%fd229, 0d3F847D18B0EEC6CC;
	fma.rn.f64 	%fd230, %fd228, %fd203, %fd229;
	mov.f64 	%fd231, 0d3F8D0AF961BA53B0;
	fma.rn.f64 	%fd232, %fd230, %fd203, %fd231;
	mov.f64 	%fd233, 0d3F91BF7734CF1C48;
	fma.rn.f64 	%fd234, %fd232, %fd203, %fd233;
	mov.f64 	%fd235, 0d3F96E91483144EF7;
	fma.rn.f64 	%fd236, %fd234, %fd203, %fd235;
	mov.f64 	%fd237, 0d3F9F1C6E0A4F9F81;
	fma.rn.f64 	%fd238, %fd236, %fd203, %fd237;
	mov.f64 	%fd239, 0d3FA6DB6DC27FA92B;
	fma.rn.f64 	%fd240, %fd238, %fd203, %fd239;
	mov.f64 	%fd241, 0d3FB333333320F91B;
	fma.rn.f64 	%fd242, %fd240, %fd203, %fd241;
	mov.f64 	%fd243, 0d3FC5555555555F4D;
	fma.rn.f64 	%fd244, %fd242, %fd203, %fd243;
	mul.f64 	%fd245, %fd203, %fd244;
	mul.f64 	%fd246, %fd219, 0dC000000000000000;
	mov.f64 	%fd247, 0d3C91A62633145C07;
	fma.rn.f64 	%fd248, %fd246, %fd245, %fd247;
	add.f64 	%fd249, %fd246, 0d3FE921FB54442D18;
	add.f64 	%fd250, %fd249, %fd248;
	add.f64 	%fd251, %fd250, 0d3FE921FB54442D18;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r107, %temp}, %fd251;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r108}, %fd251;
	}
	and.b32  	%r109, %r19, -2147483648;
	or.b32  	%r110, %r108, %r109;
	mov.b64 	%fd307, {%r107, %r110};

BB0_62:
	add.f64 	%fd279, %fd307, %fd307;
	mul.f64 	%fd280, %fd279, 0d40B8E4CCCCCCCCCD;
	cvta.to.global.u64 	%rd49, %rd3;
	mul.wide.s32 	%rd50, %r1, 8;
	add.s64 	%rd51, %rd49, %rd50;
	st.global.f64 	[%rd51], %fd280;

BB0_63:
	ret;
}

.func  (.param .b64 func_retval0) __internal_trig_reduction_slowpathd(
	.param .b64 __internal_trig_reduction_slowpathd_param_0,
	.param .b64 __internal_trig_reduction_slowpathd_param_1
)
{
	.local .align 8 .b8 	__local_depot1[40];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<9>;
	.reg .b32 	%r<43>;
	.reg .f64 	%fd<5>;
	.reg .b64 	%rd<100>;


	mov.u64 	%rd99, __local_depot1;
	cvta.local.u64 	%SP, %rd99;
	ld.param.f64 	%fd4, [__internal_trig_reduction_slowpathd_param_0];
	ld.param.u64 	%rd37, [__internal_trig_reduction_slowpathd_param_1];
	add.u64 	%rd38, %SP, 0;
	cvta.to.local.u64 	%rd1, %rd38;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r1}, %fd4;
	}
	and.b32  	%r41, %r1, -2147483648;
	shr.u32 	%r3, %r1, 20;
	bfe.u32 	%r4, %r1, 20, 11;
	setp.eq.s32	%p1, %r4, 2047;
	@%p1 bra 	BB1_13;

	add.s32 	%r16, %r4, -1024;
	shr.u32 	%r17, %r16, 6;
	mov.u32 	%r18, 16;
	sub.s32 	%r5, %r18, %r17;
	mov.u32 	%r19, 19;
	sub.s32 	%r20, %r19, %r17;
	mov.u32 	%r21, 18;
	min.s32 	%r6, %r21, %r20;
	setp.gt.s32	%p2, %r5, %r6;
	mov.u64 	%rd93, 0;
	mov.u64 	%rd92, %rd1;
	@%p2 bra 	BB1_4;

	mov.b64 	 %rd41, %fd4;
	shl.b64 	%rd42, %rd41, 11;
	or.b64  	%rd3, %rd42, -9223372036854775808;
	add.s32 	%r7, %r5, -1;
	mov.u64 	%rd91, %rd1;
	bfe.u32 	%r22, %r1, 20, 11;
	add.s32 	%r23, %r22, -1024;
	shr.u32 	%r24, %r23, 6;
	mov.u32 	%r25, 15;
	sub.s32 	%r26, %r25, %r24;
	mul.wide.s32 	%rd43, %r26, 8;
	mov.u64 	%rd44, __cudart_i2opi_d;
	add.s64 	%rd89, %rd44, %rd43;
	mov.u64 	%rd93, 0;
	mov.u64 	%rd90, %rd1;
	mov.u32 	%r40, %r7;

BB1_3:
	.pragma "nounroll";
	mov.u32 	%r8, %r40;
	mov.u64 	%rd7, %rd90;
	ld.const.u64 	%rd47, [%rd89];
	// inline asm
	{
	.reg .u32 r0, r1, r2, r3, alo, ahi, blo, bhi, clo, chi;
	mov.b64         {alo,ahi}, %rd47;    
	mov.b64         {blo,bhi}, %rd3;    
	mov.b64         {clo,chi}, %rd93;    
	mad.lo.cc.u32   r0, alo, blo, clo;
	madc.hi.cc.u32  r1, alo, blo, chi;
	madc.hi.u32     r2, alo, bhi,   0;
	mad.lo.cc.u32   r1, alo, bhi,  r1;
	madc.hi.cc.u32  r2, ahi, blo,  r2;
	madc.hi.u32     r3, ahi, bhi,   0;
	mad.lo.cc.u32   r1, ahi, blo,  r1;
	madc.lo.cc.u32  r2, ahi, bhi,  r2;
	addc.u32        r3,  r3,   0;     
	mov.b64         %rd45, {r0,r1};      
	mov.b64         %rd93, {r2,r3};      
	}
	// inline asm
	st.local.u64 	[%rd91], %rd45;
	add.s32 	%r9, %r8, 1;
	sub.s32 	%r27, %r9, %r7;
	mul.wide.s32 	%rd50, %r27, 8;
	add.s64 	%rd91, %rd1, %rd50;
	add.s64 	%rd13, %rd7, 8;
	mov.u64 	%rd92, %rd13;
	add.s64 	%rd89, %rd89, 8;
	setp.lt.s32	%p3, %r9, %r6;
	mov.u64 	%rd90, %rd13;
	mov.u32 	%r40, %r9;
	@%p3 bra 	BB1_3;

BB1_4:
	st.local.u64 	[%rd92], %rd93;
	ld.local.u64 	%rd94, [%rd1+16];
	ld.local.u64 	%rd95, [%rd1+24];
	and.b32  	%r10, %r3, 63;
	setp.eq.s32	%p4, %r10, 0;
	@%p4 bra 	BB1_6;

	mov.u32 	%r28, 64;
	sub.s32 	%r29, %r28, %r10;
	shl.b64 	%rd51, %rd95, %r10;
	shr.u64 	%rd52, %rd94, %r29;
	or.b64  	%rd95, %rd51, %rd52;
	shl.b64 	%rd53, %rd94, %r10;
	ld.local.u64 	%rd54, [%rd1+8];
	shr.u64 	%rd55, %rd54, %r29;
	or.b64  	%rd94, %rd55, %rd53;

BB1_6:
	cvta.to.local.u64 	%rd56, %rd37;
	shr.u64 	%rd57, %rd95, 62;
	cvt.u32.u64	%r30, %rd57;
	shr.u64 	%rd58, %rd94, 62;
	shl.b64 	%rd59, %rd95, 2;
	or.b64  	%rd97, %rd59, %rd58;
	shl.b64 	%rd96, %rd94, 2;
	shr.u64 	%rd60, %rd95, 61;
	cvt.u32.u64	%r31, %rd60;
	and.b32  	%r32, %r31, 1;
	add.s32 	%r33, %r32, %r30;
	neg.s32 	%r34, %r33;
	setp.eq.s32	%p5, %r41, 0;
	selp.b32	%r35, %r33, %r34, %p5;
	st.local.u32 	[%rd56], %r35;
	setp.eq.s32	%p6, %r32, 0;
	@%p6 bra 	BB1_8;

	mov.u64 	%rd64, 0;
	// inline asm
	{
	.reg .u32 r0, r1, r2, r3, a0, a1, a2, a3, b0, b1, b2, b3;
	mov.b64         {a0,a1}, %rd64;
	mov.b64         {a2,a3}, %rd64;
	mov.b64         {b0,b1}, %rd96;
	mov.b64         {b2,b3}, %rd97;
	sub.cc.u32      r0, a0, b0; 
	subc.cc.u32     r1, a1, b1; 
	subc.cc.u32     r2, a2, b2; 
	subc.u32        r3, a3, b3; 
	mov.b64         %rd96, {r0,r1};
	mov.b64         %rd97, {r2,r3};
	}
	// inline asm
	xor.b32  	%r41, %r41, -2147483648;

BB1_8:
	clz.b64 	%r42, %rd97;
	setp.eq.s32	%p7, %r42, 0;
	@%p7 bra 	BB1_10;

	shl.b64 	%rd67, %rd97, %r42;
	mov.u32 	%r36, 64;
	sub.s32 	%r37, %r36, %r42;
	shr.u64 	%rd68, %rd96, %r37;
	or.b64  	%rd97, %rd68, %rd67;

BB1_10:
	mov.u64 	%rd72, -3958705157555305931;
	// inline asm
	{
	.reg .u32 r0, r1, r2, r3, alo, ahi, blo, bhi;
	mov.b64         {alo,ahi}, %rd97;   
	mov.b64         {blo,bhi}, %rd72;   
	mul.lo.u32      r0, alo, blo;    
	mul.hi.u32      r1, alo, blo;    
	mad.lo.cc.u32   r1, alo, bhi, r1;
	madc.hi.u32     r2, alo, bhi,  0;
	mad.lo.cc.u32   r1, ahi, blo, r1;
	madc.hi.cc.u32  r2, ahi, blo, r2;
	madc.hi.u32     r3, ahi, bhi,  0;
	mad.lo.cc.u32   r2, ahi, bhi, r2;
	addc.u32        r3, r3,  0;      
	mov.b64         %rd69, {r0,r1};     
	mov.b64         %rd98, {r2,r3};     
	}
	// inline asm
	setp.lt.s64	%p8, %rd98, 1;
	@%p8 bra 	BB1_12;

	// inline asm
	{
	.reg .u32 r0, r1, r2, r3, a0, a1, a2, a3, b0, b1, b2, b3;
	mov.b64         {a0,a1}, %rd69;
	mov.b64         {a2,a3}, %rd98;
	mov.b64         {b0,b1}, %rd69;
	mov.b64         {b2,b3}, %rd98;
	add.cc.u32      r0, a0, b0; 
	addc.cc.u32     r1, a1, b1; 
	addc.cc.u32     r2, a2, b2; 
	addc.u32        r3, a3, b3; 
	mov.b64         %rd73, {r0,r1};
	mov.b64         %rd98, {r2,r3};
	}
	// inline asm
	add.s32 	%r42, %r42, 1;

BB1_12:
	cvt.u64.u32	%rd79, %r41;
	shl.b64 	%rd80, %rd79, 32;
	mov.u32 	%r38, 1022;
	sub.s32 	%r39, %r38, %r42;
	cvt.u64.u32	%rd81, %r39;
	shl.b64 	%rd82, %rd81, 52;
	add.s64 	%rd83, %rd98, 1;
	shr.u64 	%rd84, %rd83, 10;
	add.s64 	%rd85, %rd84, 1;
	shr.u64 	%rd86, %rd85, 1;
	add.s64 	%rd87, %rd86, %rd82;
	or.b64  	%rd88, %rd87, %rd80;
	mov.b64 	 %fd4, %rd88;

BB1_13:
	st.param.f64	[func_retval0+0], %fd4;
	ret;
}

.func  (.param .b64 func_retval0) __internal_accurate_pow(
	.param .b64 __internal_accurate_pow_param_0
)
{
	.reg .pred 	%p<8>;
	.reg .f32 	%f<3>;
	.reg .b32 	%r<49>;
	.reg .f64 	%fd<136>;


	ld.param.f64 	%fd12, [__internal_accurate_pow_param_0];
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r46}, %fd12;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%r45, %temp}, %fd12;
	}
	shr.u32 	%r47, %r46, 20;
	setp.ne.s32	%p1, %r47, 0;
	@%p1 bra 	BB2_2;

	mul.f64 	%fd13, %fd12, 0d4350000000000000;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r46}, %fd13;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%r45, %temp}, %fd13;
	}
	shr.u32 	%r16, %r46, 20;
	add.s32 	%r47, %r16, -54;

BB2_2:
	add.s32 	%r48, %r47, -1023;
	and.b32  	%r17, %r46, -2146435073;
	or.b32  	%r18, %r17, 1072693248;
	mov.b64 	%fd134, {%r45, %r18};
	setp.lt.u32	%p2, %r18, 1073127583;
	@%p2 bra 	BB2_4;

	{
	.reg .b32 %temp; 
	mov.b64 	{%r19, %temp}, %fd134;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r20}, %fd134;
	}
	add.s32 	%r21, %r20, -1048576;
	mov.b64 	%fd134, {%r19, %r21};
	add.s32 	%r48, %r47, -1022;

BB2_4:
	add.f64 	%fd15, %fd134, 0d3FF0000000000000;
	// inline asm
	rcp.approx.ftz.f64 %fd14,%fd15;
	// inline asm
	neg.f64 	%fd16, %fd15;
	mov.f64 	%fd17, 0d3FF0000000000000;
	fma.rn.f64 	%fd18, %fd16, %fd14, %fd17;
	fma.rn.f64 	%fd19, %fd18, %fd18, %fd18;
	fma.rn.f64 	%fd20, %fd19, %fd14, %fd14;
	add.f64 	%fd21, %fd134, 0dBFF0000000000000;
	mul.f64 	%fd22, %fd21, %fd20;
	fma.rn.f64 	%fd23, %fd21, %fd20, %fd22;
	mul.f64 	%fd24, %fd23, %fd23;
	mov.f64 	%fd25, 0d3ED0F5D241AD3B5A;
	mov.f64 	%fd26, 0d3EB0F5FF7D2CAFE2;
	fma.rn.f64 	%fd27, %fd26, %fd24, %fd25;
	mov.f64 	%fd28, 0d3EF3B20A75488A3F;
	fma.rn.f64 	%fd29, %fd27, %fd24, %fd28;
	mov.f64 	%fd30, 0d3F1745CDE4FAECD5;
	fma.rn.f64 	%fd31, %fd29, %fd24, %fd30;
	mov.f64 	%fd32, 0d3F3C71C7258A578B;
	fma.rn.f64 	%fd33, %fd31, %fd24, %fd32;
	mov.f64 	%fd34, 0d3F6249249242B910;
	fma.rn.f64 	%fd35, %fd33, %fd24, %fd34;
	mov.f64 	%fd36, 0d3F89999999999DFB;
	fma.rn.f64 	%fd37, %fd35, %fd24, %fd36;
	sub.f64 	%fd38, %fd21, %fd23;
	add.f64 	%fd39, %fd38, %fd38;
	neg.f64 	%fd40, %fd23;
	fma.rn.f64 	%fd41, %fd40, %fd21, %fd39;
	mul.f64 	%fd42, %fd20, %fd41;
	fma.rn.f64 	%fd43, %fd24, %fd37, 0d3FB5555555555555;
	mov.f64 	%fd44, 0d3FB5555555555555;
	sub.f64 	%fd45, %fd44, %fd43;
	fma.rn.f64 	%fd46, %fd24, %fd37, %fd45;
	add.f64 	%fd47, %fd46, 0d0000000000000000;
	add.f64 	%fd48, %fd47, 0dBC46A4CB00B9E7B0;
	add.f64 	%fd49, %fd43, %fd48;
	sub.f64 	%fd50, %fd43, %fd49;
	add.f64 	%fd51, %fd48, %fd50;
	mul.rn.f64 	%fd52, %fd23, %fd23;
	neg.f64 	%fd53, %fd52;
	fma.rn.f64 	%fd54, %fd23, %fd23, %fd53;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r22, %temp}, %fd42;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r23}, %fd42;
	}
	add.s32 	%r24, %r23, 1048576;
	mov.b64 	%fd55, {%r22, %r24};
	fma.rn.f64 	%fd56, %fd23, %fd55, %fd54;
	mul.rn.f64 	%fd57, %fd52, %fd23;
	neg.f64 	%fd58, %fd57;
	fma.rn.f64 	%fd59, %fd52, %fd23, %fd58;
	fma.rn.f64 	%fd60, %fd52, %fd42, %fd59;
	fma.rn.f64 	%fd61, %fd56, %fd23, %fd60;
	mul.rn.f64 	%fd62, %fd49, %fd57;
	neg.f64 	%fd63, %fd62;
	fma.rn.f64 	%fd64, %fd49, %fd57, %fd63;
	fma.rn.f64 	%fd65, %fd49, %fd61, %fd64;
	fma.rn.f64 	%fd66, %fd51, %fd57, %fd65;
	add.f64 	%fd67, %fd62, %fd66;
	sub.f64 	%fd68, %fd62, %fd67;
	add.f64 	%fd69, %fd66, %fd68;
	add.f64 	%fd70, %fd23, %fd67;
	sub.f64 	%fd71, %fd23, %fd70;
	add.f64 	%fd72, %fd67, %fd71;
	add.f64 	%fd73, %fd69, %fd72;
	add.f64 	%fd74, %fd42, %fd73;
	add.f64 	%fd75, %fd70, %fd74;
	sub.f64 	%fd76, %fd70, %fd75;
	add.f64 	%fd77, %fd74, %fd76;
	xor.b32  	%r25, %r48, -2147483648;
	mov.u32 	%r26, 1127219200;
	mov.b64 	%fd78, {%r25, %r26};
	mov.u32 	%r27, -2147483648;
	mov.b64 	%fd79, {%r27, %r26};
	sub.f64 	%fd80, %fd78, %fd79;
	mov.f64 	%fd81, 0d3FE62E42FEFA39EF;
	fma.rn.f64 	%fd82, %fd80, %fd81, %fd75;
	neg.f64 	%fd83, %fd80;
	fma.rn.f64 	%fd84, %fd83, %fd81, %fd82;
	sub.f64 	%fd85, %fd84, %fd75;
	sub.f64 	%fd86, %fd77, %fd85;
	mov.f64 	%fd87, 0d3C7ABC9E3B39803F;
	fma.rn.f64 	%fd88, %fd80, %fd87, %fd86;
	add.f64 	%fd89, %fd82, %fd88;
	sub.f64 	%fd90, %fd82, %fd89;
	add.f64 	%fd91, %fd88, %fd90;
	mov.f64 	%fd92, 0d4000000000000000;
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r28}, %fd92;
	}
	add.s32 	%r29, %r28, %r28;
	setp.gt.u32	%p3, %r29, -33554433;
	and.b32  	%r30, %r28, -15728641;
	selp.b32	%r31, %r30, %r28, %p3;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r32, %temp}, %fd92;
	}
	mov.b64 	%fd93, {%r32, %r31};
	mul.rn.f64 	%fd94, %fd89, %fd93;
	neg.f64 	%fd95, %fd94;
	fma.rn.f64 	%fd96, %fd89, %fd93, %fd95;
	fma.rn.f64 	%fd97, %fd91, %fd93, %fd96;
	add.f64 	%fd4, %fd94, %fd97;
	sub.f64 	%fd98, %fd94, %fd4;
	add.f64 	%fd5, %fd97, %fd98;
	mov.f64 	%fd99, 0d3FF71547652B82FE;
	mul.rn.f64 	%fd100, %fd4, %fd99;
	mov.f64 	%fd101, 0d4338000000000000;
	add.rn.f64 	%fd102, %fd100, %fd101;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r13, %temp}, %fd102;
	}
	mov.f64 	%fd103, 0dC338000000000000;
	add.rn.f64 	%fd104, %fd102, %fd103;
	mov.f64 	%fd105, 0dBFE62E42FEFA39EF;
	fma.rn.f64 	%fd106, %fd104, %fd105, %fd4;
	mov.f64 	%fd107, 0dBC7ABC9E3B39803F;
	fma.rn.f64 	%fd108, %fd104, %fd107, %fd106;
	mov.f64 	%fd109, 0d3E928AF3FCA213EA;
	mov.f64 	%fd110, 0d3E5ADE1569CE2BDF;
	fma.rn.f64 	%fd111, %fd110, %fd108, %fd109;
	mov.f64 	%fd112, 0d3EC71DEE62401315;
	fma.rn.f64 	%fd113, %fd111, %fd108, %fd112;
	mov.f64 	%fd114, 0d3EFA01997C89EB71;
	fma.rn.f64 	%fd115, %fd113, %fd108, %fd114;
	mov.f64 	%fd116, 0d3F2A01A014761F65;
	fma.rn.f64 	%fd117, %fd115, %fd108, %fd116;
	mov.f64 	%fd118, 0d3F56C16C1852B7AF;
	fma.rn.f64 	%fd119, %fd117, %fd108, %fd118;
	mov.f64 	%fd120, 0d3F81111111122322;
	fma.rn.f64 	%fd121, %fd119, %fd108, %fd120;
	mov.f64 	%fd122, 0d3FA55555555502A1;
	fma.rn.f64 	%fd123, %fd121, %fd108, %fd122;
	mov.f64 	%fd124, 0d3FC5555555555511;
	fma.rn.f64 	%fd125, %fd123, %fd108, %fd124;
	mov.f64 	%fd126, 0d3FE000000000000B;
	fma.rn.f64 	%fd127, %fd125, %fd108, %fd126;
	fma.rn.f64 	%fd128, %fd127, %fd108, %fd17;
	fma.rn.f64 	%fd129, %fd128, %fd108, %fd17;
	{
	.reg .b32 %temp; 
	mov.b64 	{%r14, %temp}, %fd129;
	}
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r15}, %fd129;
	}
	shl.b32 	%r33, %r13, 20;
	add.s32 	%r34, %r15, %r33;
	mov.b64 	%fd135, {%r14, %r34};
	{
	.reg .b32 %temp; 
	mov.b64 	{%temp, %r35}, %fd4;
	}
	mov.b32 	 %f2, %r35;
	abs.f32 	%f1, %f2;
	setp.lt.f32	%p4, %f1, 0f4086232B;
	@%p4 bra 	BB2_7;

	setp.lt.f64	%p5, %fd4, 0d0000000000000000;
	add.f64 	%fd130, %fd4, 0d7FF0000000000000;
	selp.f64	%fd135, 0d0000000000000000, %fd130, %p5;
	setp.geu.f32	%p6, %f1, 0f40874800;
	@%p6 bra 	BB2_7;

	shr.u32 	%r36, %r13, 31;
	add.s32 	%r37, %r13, %r36;
	shr.s32 	%r38, %r37, 1;
	shl.b32 	%r39, %r38, 20;
	add.s32 	%r40, %r39, %r15;
	mov.b64 	%fd131, {%r14, %r40};
	sub.s32 	%r41, %r13, %r38;
	shl.b32 	%r42, %r41, 20;
	add.s32 	%r43, %r42, 1072693248;
	mov.u32 	%r44, 0;
	mov.b64 	%fd132, {%r44, %r43};
	mul.f64 	%fd135, %fd131, %fd132;

BB2_7:
	abs.f64 	%fd133, %fd135;
	setp.eq.f64	%p7, %fd133, 0d7FF0000000000000;
	@%p7 bra 	BB2_9;

	fma.rn.f64 	%fd135, %fd135, %fd5, %fd135;

BB2_9:
	st.param.f64	[func_retval0+0], %fd135;
	ret;
}


